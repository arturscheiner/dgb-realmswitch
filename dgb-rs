#!/bin/bash

# Project: Digibee Realm Switch
VERSION="v1.0.0"
# Written by: Artur Scheiner
# Email: artur.scheiner@gmail.com

############################################################
# Constants                                                #
############################################################
THIS=$(echo $0 | awk -F'/' '{print $(NF)}')
CONFIG_FILE=~/.digibeectl/config.json
DGB_RS_DIR=~/.$THIS
USER_PATHS=$(echo ${PATH//:/ })
#[[ $0 == ./* ]] && $0 || echo $THIS

############################################################
# Init                                                     #
############################################################ 
Init()
{
    mkdir -p $DGB_RS_DIR

    if [ ! -z "$(ls -A $DGB_RS_DIR)" ]; then
        chmod 444 $DGB_RS_DIR/*
    fi
}

############################################################
# Functions                                                #
############################################################
Help()
{
   Title "Help Information"
   echo "Syntax: $THIS_REF [-s|a|i|h]"
   echo
   echo "$(TT yellow)realm config$(TT white)"
   echo "-a     Add a new realm to the switch list"
   echo "       $0"
   echo "-s     Switch realm --> $0 -s realm-name"
   echo 
   echo "$(TT yellow)this script deploy$(TT white)"
   echo "-c     Switch realm --> $0 -s realm-name"
   echo "-d     Deploy this scriipt to a directory: the suggested path is /usr/local/bin"
   echo
   echo "$(TT yellow)other options$(TT white)"  
   echo "-h     Print this Help."
   echo
}

Set()
{
    Title "Set realm based on switch list"
    LIST=$(ls $DGB_RS_DIR)
    REALM=$1
    if [[ ${LIST[*]} =~ (^|[[:space:]])"$REALM"($|[[:space:]]) ]]; then
       echo "The realm $REALM is available. Switching..."
       echo 
       ln -sf $DGB_RS_DIR/$REALM $CONFIG_FILE
       digibeectl get config
    else
       echo "Could not switch to the realm $REALM."
       echo "Check-out the available realms to switch to:"
       echo
       ListRealms
    fi
}

Deploy()
{
    Title "Deploy this script to a directory"
    echo "Sugested path is /usr/local/bin"



    echo $0
    TO_PATH=$1

    chmod +x $0

    if [ -f $TO_PATH/$THIS ]; then
        sudo rm $TO_PATH/$THIS
    fi

    sudo cp $0 $TO_PATH
}

Add()
{
    echo "Add a new realm to the switch list"
    echo 
    
    if [ -f "$CONFIG_FILE" ] && [ ! -h "$CONFIG_FILE" ]; then

       REALM=$(digibeectl get config | grep realm | awk '{print $2}')

       echo "Digibeectl is configured to:"
       digibeectl get config
       echo 
       echo "Adding realm $REALM to the available list"
       cp $CONFIG_FILE $DGB_RS_DIR/$REALM
       chmod 444 $DGB_RS_DIR/$REALM
       rm $CONFIG_FILE
       Switch $REALM
    else
       FILE=$1
       SKEY=$2
       AKEY=$3

       echo $FILE $SKEY $AKEY

       echo "Digibeectl is not configured"
       echo 'digibeectl set config \
            --file path/file.json \
            --secret-key "encryption-key" \
            --auth-key "encryption-passphrase"'
       echo
       #digibeectl set config \
        #    --file $FILE \
        #    --secret-key "$SKEY" \
        #    --auth-key "$AKEY"
       digibeectl get config
    fi
}

Unset()
{
    rm $CONFIG_FILE
}

List()
{
    echo "List configured realms"
    echo
    echo "The realms listed bellow are already configured:"
    echo 
    ListRealms
    echo
}

ListRealms()
{
    ACTIVE_REALM=$(digibeectl get config | grep realm | awk '{print $2}')

    for c in $(ls $DGB_RS_DIR); do
        [[ $c == $ACTIVE_REALM ]] && echo "  $(TT bold; TT green)- $c$(TT normal)" || echo "  - $c"       
    done
}

Remove()
{
    echo "Remove realm from list"
    echo
    REALM=$1

    if [[ -f $DGB_RS_DIR/$REALM ]]; then
        chmod +rw $DGB_RS_DIR/$REALM
        rm $DGB_RS_DIR/$REALM
        echo "Realm $REALM was removed successfully!"
        echo
    else
        echo "The realm $REALM is not configured"
    fi
        echo
        echo "Check the remaining realms configured:"
        echo
        ListRealms
}

TT()
{
    FORMAT=$1

    case $FORMAT in
        bold)
            tput bold
            ;;
        underline)
            tput smul
            ;;
        standout)
            tput smso
            ;;
        normal)
            tput sgr0
            ;;
        red)
            tput setaf 1
            ;;
        green)
            tput setaf 2
            ;;
        yellow)
            tput setaf 3
            ;;
        blue)
            tput setaf 4
            ;;
        magenta)
            tput setaf 5
            ;;
        cyan)
            tput setaf 6
            ;;
        white)
            tput setaf 7
            ;;
        *)
            tput sgr0
            ;;
    esac
}

Error()
{
    MESSAGE=$1
    echo "$(TT red; TT bold)Error: $MESSAGE$(TT normal; TT white)"
    echo
}

Title()
{
    MESSAGE=$1
    echo "$(TT green; TT bold)$MESSAGE$(TT normal; TT white)"
    echo
}

Init()
{
    mkdir -p $DGB_RS_DIR

    if [ ! -z "$(ls -A $DGB_RS_DIR)" ]; then
        chmod 444 $DGB_RS_DIR/*
    fi
}

Check()
{
    Title "Check this script deployment"
    TRY_FIND=$(which $THIS)
 
    if [ -z $TRY_FIND ]
    then
        echo "Seems that this script is not deployed on a PATH, yet!"
        echo "These are the available PATHS configured for this profile:"
        echo $PATHS
        
        for p in $(echo $USER_PATHS); 
        do
            [ $p = "/usr/local/bin" ] && echo "$(TT blue; TT bold)$p$(TT white; TT normal)" || echo $p
        done
        
        echo "Deploy it using the recommended command from the current directory:"
        echo
        echo "$(TT green; TT bold)sudo $0 -d /usr/local/bin$(TT white; TT normal)"
        echo
    else
        echo "Seems that this script is already deployed on this system!"
        echo "Check it out where it is deployed:"
        echo 
        echo "$(TT blue; TT bold)$TRY_FIND$(TT white; TT normal)"
        echo
        DEPLOYED=$(shasum $(which $THIS) | awk '{print $1}')
        ACTUAL=$(shasum $(echo $0) | awk '{print $1}')

        [ $DEPLOYED = $ACTUAL ] && \
            printf "Nice, the actual deployment $(TT green; TT bold)is the same$(TT white; TT normal) \
            \nas the one available on this repo directory!\n\n" || \
            printf "Hum, the actual deployment $(TT yellow; TT bold)is diffent$(TT white; TT normal) \
            \nthan the one available on this repo directory! \
            \nYou can re-deploy it by running: \
            \n\n$(TT green; TT bold)sudo $0 -d /usr/local/bin$(TT white; TT normal)\n\n"
    fi 


}
############################################################
# Main program                                             #
############################################################

############################################################
# Init program                                             #
############################################################
Init

############################################################
# Process the input options.                               #
############################################################
# Get the options
echo "$(TT magenta)Digibeectl$(TT white) Realm Switch v1.0.0"

OPTERR=0
OPTION=$1

OPTIONS="hlcaus:r:d:"
while getopts $OPTIONS option; do
   case $option in
      a) # config
         Add
         exit;;
      h) # display Help
         Help
         exit;;
      s) # set active realm
         Set $OPTARG
         exit;;
      d) # deploy script to the /usr/local/bin
        Check
        Deploy $OPTARG
         exit;;
      l) # list script
         List
         exit;;
      r) # list script
         Remove $OPTARG
         exit;;
      u) # unset active realm
         Unset
         exit;;
    c) # unset active realm
        Check
        exit;;
     \?) # Invalid option
        Error "invalid option $OPTION or option without required config"
        exit;;
   esac
done

if [[ -z $1 ]]; then
    Error "no option defined"
    Help
fi