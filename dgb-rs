#!/bin/bash

# Project: Digibee Realm Switch..
VERSION="v0.1.0"
# Written by: Artur Scheiner
# Email: artur.scheiner@gmail.com

############################################################
# Init                                                     #
############################################################
isLocal()[[ $0 == ./* ]]

THIS=$(echo $0 | awk -F'/' '{print $(NF)}')
CONFIG_FILE=~/.digibeectl/config.json
DGB_RS_DIR=~/.$THIS
USER_PATHS=$(echo ${PATH//:/ })

isLocal && THIS_TYPE="$0" || THIS_TYPE="$THIS"

Init()
{
    mkdir -p $DGB_RS_DIR

    if [ ! -z "$(ls -A $DGB_RS_DIR)" ]; then
        chmod 444 $DGB_RS_DIR/*
    fi 
}

############################################################
# Functions                                                #
############################################################
Help()
{
    Title "Help Information"
    printf "Syntax: $(TT bold)$THIS_TYPE [-a|l|r|s|u|c|d|h] params$(TT normal)\n\n"
    printf "$(TT yellow)about realm stuff$(TT white)\n"
    printf "a\tAdd a new realm to the switch list\n\tE.g. -> $(TT green)$THIS_TYPE -a$(TT white)\n\n"
    printf "l\tList all the realms configured\n\tE.g. -> $(TT green)$THIS_TYPE -l$(TT white)\n\n"
    printf "r\tRemove a realm from the switch list\n\tE.g. -> $(TT green)$THIS_TYPE -r $(TT underline)realm-name$(TT normal; TT white)\n\n"
    printf "s\tSet an active realm\n\tE.g. -> $(TT green)$THIS_TYPE -s $(TT underline)realm-name$(TT normal; TT white)\n\n"
    printf "u\tUnset the active realm\n\tE.g. -> $(TT green)$THIS_TYPE -u$(TT normal; TT white)\n\n"
   
    if [[ $0 == ./* ]]; then
        printf "$(TT yellow)about this script$(TT white)\n"
        printf "c\tCheck this script deployment\n\tE.g. -> $(TT green)$THIS_TYPE -c$(TT white)\n\n"
        printf "d\tDeploy this script into a directory\n\tE.g. -> $(TT green)sudo $THIS_TYPE -d /usr/local/bin$(TT white)\n\n"
    fi

    printf "$(TT yellow)about anything else$(TT white)\n"  
    printf "h\tShow this help information\n\tE.g. -> $(TT green)$THIS_TYPE -h$(TT white)\n\n"
}

Set()
{
    Title "Set realm based on switch list"
    LIST=$(ls $DGB_RS_DIR)
    REALM=$1
    if [[ ${LIST[*]} =~ (^|[[:space:]])"$REALM"($|[[:space:]]) ]]; then
        printf "The realm $(TT blue)$REALM$(TT white) is now, active!\n\n"
        ln -sf $DGB_RS_DIR/$REALM $CONFIG_FILE     
        ListRealms
        getConfig
        echo
    else
        Warning "Could not switch to this realm"
        printf "\t$(TT red)- $REALM$(TT white)\n\nCheck-out the available realms to switch to:\n\n"
        ListRealms
        echo
    fi
}

Deploy()
{
    Title "Deploy this script to a directory"
    echo "Sugested path is /usr/local/bin"



    echo $0
    TO_PATH=$1

    chmod +x $0

    if [ -f $TO_PATH/$THIS ]; then
        sudo rm $TO_PATH/$THIS
    fi

    sudo cp $0 $TO_PATH
}

Add()
{
    Title "Add a new realm to the switch list"

    if [ -h "$CONFIG_FILE" ]; then
        Warning "there is an active realm configured"
        ListRealms
        printf "Unset the active realm prior to add a new one to the list by running:\n\n"
        printf "\t$(TT green)$THIS_TYPE -u$(TT normal; TT white)\n\n"
        return
    fi

    if [ -f "$CONFIG_FILE" ] && [ ! -h "$CONFIG_FILE" ]; then

        REALM=$(digibeectl get config | grep realm | awk '{print $2}')
        getConfig
    
        if [ -f $DGB_RS_DIR/$REALM ]; then
            printf "\nReplacing the configuration for the realm $REALM in the switch list\n\n"
            chmod +rw $DGB_RS_DIR/$REALM        
        else
            printf "\nAdding a new realm $REALM to the switch list\n"
        fi
        cp $CONFIG_FILE $DGB_RS_DIR/$REALM
        chmod 444 $DGB_RS_DIR/$REALM
        rm $CONFIG_FILE
        ListRealms
        printf "Now you can set an active realm by running:\n\n"
        printf "\t$(TT green; TT bold)$THIS_TYPE -s $(TT underline)$REALM$(TT normal; TT white)\n\n"
    else
        Warning "digibeectl is not configured"
        getConfig
        printf "\nThe realms listed bellow are ready to be switched:\n\n"
        ListRealms
        beforeAdd
    fi
}

beforeAdd(){
    printf "To add a new realm to the list, you must configure $(TT yellow)digibeectl$(TT normal) by running:\n\n"
    printf "$(TT green)digibeectl set config \\ \n\t--file $(TT underline)path/file.json$(TT normal; TT green) \\ \n\t--secret-key \"$(TT underline)encryption-key$(TT normal; TT green)\" \\ \n\t--auth-key \"$(TT underline)encryption-passphrase\"$(TT normal)\n\n"
    printf "Check Digibee documentation to know more on how to create\nthe $(TT yellow)file.json,$(TT normal) the $(TT yellow)secret-key$(TT normal) and the $(TT yellow)auth-key$(TT normal)\n\n"
}

Unset()
{
    Title "Unset the active realm"
    rm -f $CONFIG_FILE
    printf "There is no active realm configured:\n\n"
    ListRealms
    getConfig
    
}

List()
{
    Title "List configured realms"
    echo "The realms listed bellow are ready to be switched:"
    echo 
    ListRealms
    echo
}

ListRealms()
{
    ACTIVE_REALM=$(digibeectl get config | grep realm | awk '{print $2}')

    for c in $(ls $DGB_RS_DIR); do
        [[ $c == $ACTIVE_REALM ]] && printf "\t$(TT bold; TT green)- $c (active)$(TT normal)\n" || printf "\t- $c\n"       
    done
    echo
}

getConfig()
{
    printf "Check out the $(TT yellow)digibeectl get config$(TT white) output\n\n"
    while read -r line; do printf "\t- $line\n"; done < <(digibeectl get config)
}

Remove()
{
    Title "Remove realm from list"
    REALM=$1
    ACTIVE_REALM=$(digibeectl get config | grep realm | awk '{print $2}')

    if [[ -f $DGB_RS_DIR/$REALM ]]; then
        chmod +rw $DGB_RS_DIR/$REALM
        [[ $ACTIVE_REALM = $REALM ]] && rm -f $CONFIG_FILE
        rm -f $DGB_RS_DIR/$REALM
        echo "Realm $REALM was removed successfully!"
        echo
    else
       Warning "realm not found on the switch list"
        printf "\t$(TT red)- $REALM$(TT white)\n\nCheck-out the available realms to switch to:\n\n"
        ListRealms
        echo
    fi

    printf "Now you can remove a realm by running:\n\n"
    printf "\t$(TT green; TT bold)$THIS_TYPE -r $(TT underline)realm-name$(TT normal; TT white)\n\n"
}

TT()
{
    FORMAT=$1

    case $FORMAT in
        bold)
            tput bold
            ;;
        underline)
            tput smul
            ;;
        standout)
            tput smso
            ;;
        normal)
            tput sgr0
            ;;
        red)
            tput setaf 1
            ;;
        green)
            tput setaf 2
            ;;
        yellow)
            tput setaf 3
            ;;
        blue)
            tput setaf 4
            ;;
        magenta)
            tput setaf 5
            ;;
        cyan)
            tput setaf 6
            ;;
        white)
            tput setaf 7
            ;;
        *)
            tput sgr0
            ;;
    esac
}

callForHelp(){ 
    printf "Check the help by running:\n\n\t$(TT green; TT bold)$THIS_TYPE -h$(TT normal)\n\n"
}

Error()
{
    MESSAGE=$1
    printf "$(TT red; TT bold)ERROR: $(TT white; TT normal)$MESSAGE\n\n"
}

Warning()
{
    MESSAGE=$1
    printf "$(TT yellow; TT bold)WARNING: $(TT white; TT normal)$MESSAGE\n\n"
}

Title()
{
    MESSAGE=$1
    printf "$(TT green; TT bold)$MESSAGE$(TT normal; TT white)\n\n"
}

Init()
{
    mkdir -p $DGB_RS_DIR

    if [ ! -z "$(ls -A $DGB_RS_DIR)" ]; then
        chmod 444 $DGB_RS_DIR/*
    fi
}

Check()
{
    Title "Check this script deployment"
    TRY_FIND=$(which $THIS)
 
    if [ -z $TRY_FIND ]
    then
        echo "Seems that this script is not deployed on a PATH, yet!"
        echo "These are the available PATHS configured for this profile:"
        echo $PATHS
        
        for p in $(echo $USER_PATHS); 
        do
            [ $p = "/usr/local/bin" ] && echo "$(TT blue; TT bold)$p$(TT white; TT normal)" || echo $p
        done
        
        printf "Deploy it using the recommended command from the current directory:\n"
        printf "\t$(TT green; TT bold)sudo $0 -d /usr/local/bin$(TT white; TT normal)\n"
    else
        printf "Seems that this script is already deployed on this system!\n"
        printf "Check it out where it is deployed:\n\n"
        printf "\t$(TT blue; TT bold)$TRY_FIND$(TT white; TT normal)\n\n"
        DEPLOYED=$(shasum $(which $THIS) | awk '{print $1}')
        ACTUAL=$(shasum $(echo $0) | awk '{print $1}')

        [ $DEPLOYED = $ACTUAL ] && \
            printf "Nice, the actual deployment $(TT green; TT bold)is the same$(TT white; TT normal) \
            \nas the one available on this repo directory!\n\n" || \
            printf "Hum, the actual deployment $(TT yellow; TT bold)is diffent$(TT white; TT normal) \
            \nthan the one available on this repo directory! \
            \nYou can re-deploy it by running: \
            \n\n\t$(TT green; TT bold)sudo $0 -d /usr/local/bin$(TT white; TT normal)\n\n"
    fi 


}
############################################################
# Main program                                             #
############################################################

############################################################
# Init program                                             #
############################################################
Init

############################################################
# Process the input options.                               #
############################################################
# Get the options
printf "$(TT magenta)Digibeectl$(TT white) Realm Switch $VERSION\n\n"

OPTERR=0
OPTION=$1

isLocal && OPTIONS="hlcaus:r:d:" || OPTIONS="hlaus:r:"

while getopts $OPTIONS option; do
   case $option in
      a) # config
         Add
         exit;;
      h) # display Help
         Help
         exit;;
      s) # set active realm
         Set $OPTARG
         exit;;
      d) # deploy script to the /usr/local/bin
        Check
        Deploy $OPTARG
         exit;;
      l) # list script
         List
         exit;;
      r) # list script
         Remove $OPTARG
         exit;;
      u) # unset active realm
         Unset
         echo
         exit;;
    c) # unset active realm
        Check
        exit;;
     \?) # Invalid option
        Error "invalid option $OPTION or option without required config"
        callForHelp
        exit;;
   esac
done

if [[ -z $1 ]]; then
    Error "no option defined"
    callForHelp
fi